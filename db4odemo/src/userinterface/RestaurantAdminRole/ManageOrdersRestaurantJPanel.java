/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.RestaurantAdminRole;

import Area.AreaNetwork;
import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Restaurant.Item;
import Business.Restaurant.Order;
import Business.Restaurant.OrderStatus;
import Business.Restaurant.Restaurant;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gunav
 */
public class ManageOrdersRestaurantJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageOrdersRestaurantJPanel
     */
    
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Restaurant restaurant;
    private EcoSystem ecoSystem;
    private AreaNetwork areaNetwork;
        
    public ManageOrdersRestaurantJPanel(JPanel userProcessContainer,UserAccount userAccount,Restaurant restaurant,
        EcoSystem ecoSystem, AreaNetwork areaNetwork) {
        this.userProcessContainer = userProcessContainer;
        this.userAccount=userAccount;
        this.areaNetwork = areaNetwork;
        this.ecoSystem=ecoSystem;
        this.restaurant=restaurant;
        initComponents();
        
//        for(Order order:restaurant.getOrders()){
//            order.setOrderStatus(OrderStatus.OrderPlaced);
//        }
//        
        populateData();
    }
    
    private void populateData() {
        
        deliveryManjComboBox.removeAllItems();
        for(DeliveryMan deliveryMan:areaNetwork.getDeliveryManDirectory().getDeliveryMan()){
            deliveryManjComboBox.addItem(deliveryMan.getUseraccount().getName());
        }
        
        DefaultTableModel currentOrdersModel = (DefaultTableModel) currentOrdersjTable.getModel();
        currentOrdersModel.setRowCount(0);
        int currentOrderCount=0;
        
        DefaultTableModel successOrderModel = (DefaultTableModel) ordersDeliveredjTable.getModel();
        successOrderModel.setRowCount(0);
        int successOrderCount=0;
        
        
        for(Order order:restaurant.getOrders()){
            if(order.getOrderStatus().name().equalsIgnoreCase(OrderStatus.Delivered.name()) || 
                    order.getOrderStatus().name().equalsIgnoreCase(OrderStatus.Decline.name())){
                successOrderCount++;
                Object[] row = new Object[7];
                row[0] = currentOrderCount;
                row[1] = order.getOrderedBy().getUseraccount().getName();
                row[2] = order.getItems();
                row[3] = order.getCustomerInstructions();
                row[4] = order;
                row[5] = order.getOrderStatus();
                if(order.getAssignedTo()!=null){
                    row[6] = order.getAssignedTo().getUseraccount().getName();
                }
                successOrderModel.addRow(row);
            }else{
                currentOrderCount++;
                Object[] row = new Object[7];
                row[0] = currentOrderCount;
                row[1] = order.getOrderedBy().getUseraccount().getName();
                row[2] = order.getItems();
                row[3] = order.getCustomerInstructions();
                row[4] = order;
                row[5] = order.getOrderStatus();
                if(order.getAssignedTo()!=null){
                    row[6] = order.getAssignedTo().getUseraccount().getName();
                }
                currentOrdersModel.addRow(row);
            }
        }
        
        totalCountjLabel.setText(String.valueOf(successOrderCount));
        pendingCountjLabel.setText(String.valueOf(currentOrderCount));
        
//        DefaultTableModel deliveredMenuItemsModel = (DefaultTableModel) deliveredMenuItemjTable.getModel();
//        deliveredMenuItemsModel.setRowCount(0);
        
//        DefaultTableModel currentMenuItemsModel = (DefaultTableModel) currentMenuItemjTable.getModel();
//        currentMenuItemsModel.setRowCount(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButtonjButton = new javax.swing.JButton();
        currentOrdersHeaderjLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        currentOrdersjTable = new javax.swing.JTable();
        currentOrdersHeaderjLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ordersDeliveredjTable = new javax.swing.JTable();
        deliveryManjComboBox = new javax.swing.JComboBox<>();
        deliveryPersonjLabel = new javax.swing.JLabel();
        assignjButton = new javax.swing.JButton();
        totalCountHeaderjLabel = new javax.swing.JLabel();
        totalCountjLabel = new javax.swing.JLabel();
        pendingCountHeaderjLabel = new javax.swing.JLabel();
        pendingCountjLabel = new javax.swing.JLabel();
        declinejButton = new javax.swing.JButton();

        backButtonjButton.setText("< < Back");
        backButtonjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonjButtonActionPerformed(evt);
            }
        });

        currentOrdersHeaderjLabel.setFont(new java.awt.Font("Lucida Grande", 3, 18)); // NOI18N
        currentOrdersHeaderjLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentOrdersHeaderjLabel.setText("Manage Orders");

        currentOrdersjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "S.No", "CustomerName", "Items", "Notes", "Total Price($)", "Status of the Order", "DeliveryExecutive"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currentOrdersjTable.getTableHeader().setReorderingAllowed(false);
        currentOrdersjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                currentOrdersjTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(currentOrdersjTable);
        if (currentOrdersjTable.getColumnModel().getColumnCount() > 0) {
            currentOrdersjTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        currentOrdersHeaderjLabel1.setFont(new java.awt.Font("Lucida Grande", 3, 18)); // NOI18N
        currentOrdersHeaderjLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentOrdersHeaderjLabel1.setText("Order History");

        ordersDeliveredjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "S.No", "CustomerName", "Item", "Notes", "Total Price($)", "Status of the Order", "DeliveryExecutive"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ordersDeliveredjTable.getTableHeader().setReorderingAllowed(false);
        ordersDeliveredjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ordersDeliveredjTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(ordersDeliveredjTable);
        if (ordersDeliveredjTable.getColumnModel().getColumnCount() > 0) {
            ordersDeliveredjTable.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        deliveryPersonjLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        deliveryPersonjLabel.setText("Choose Delivery Person :");

        assignjButton.setText("Assign To?");
        assignjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignjButtonActionPerformed(evt);
            }
        });

        totalCountHeaderjLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        totalCountHeaderjLabel.setText("Total Count :");

        totalCountjLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        totalCountjLabel.setText("0");

        pendingCountHeaderjLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        pendingCountHeaderjLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pendingCountHeaderjLabel.setText("No of Order :");

        pendingCountjLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        pendingCountjLabel.setText("0");

        declinejButton.setText("Decline Order?");
        declinejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declinejButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(totalCountHeaderjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(totalCountjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(813, 813, 813))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(pendingCountHeaderjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(pendingCountjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 878, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(declinejButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButtonjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(135, 135, 135)
                                .addComponent(currentOrdersHeaderjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addComponent(currentOrdersHeaderjLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(570, 570, 570)
                        .addComponent(assignjButton)
                        .addGap(18, 18, 18)
                        .addComponent(deliveryPersonjLabel)
                        .addGap(35, 35, 35)
                        .addComponent(deliveryManjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButtonjButton)
                    .addComponent(currentOrdersHeaderjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deliveryPersonjLabel)
                    .addComponent(assignjButton)
                    .addComponent(deliveryManjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pendingCountHeaderjLabel)
                            .addComponent(pendingCountjLabel))
                        .addGap(28, 28, 28)
                        .addComponent(currentOrdersHeaderjLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalCountHeaderjLabel)
                            .addComponent(totalCountjLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(declinejButton)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonjButtonActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonjButtonActionPerformed

    private void assignjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignjButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = currentOrdersjTable.getSelectedRow();
        if(selectedIndex<0 || deliveryManjComboBox.getSelectedIndex()<0) {
            JOptionPane.showMessageDialog(this, "Please select a row or make sure you assign a delivery guy");
            return;
        }
        DefaultTableModel currentOrdersModel = (DefaultTableModel) currentOrdersjTable.getModel();
        Order order = (Order) currentOrdersModel.getValueAt(selectedIndex, 4);
        
        if(order.getAssignedTo()!=null){
            for (DeliveryMan dm : areaNetwork.getDeliveryManDirectory().getDeliveryMan()){
               if (order.getAssignedTo().getUseraccount().getName().equalsIgnoreCase(dm.getUseraccount().getName())){
                    dm.getOrders().remove(order);
                }
            }
        }
        
        
        
        order.setAcceptedBy((Employee) userAccount.getParentClass());
        order.setAssignedTo(areaNetwork.getDeliveryManDirectory().getDeliveryMan().get(deliveryManjComboBox.getSelectedIndex()));
        order.setOrderStatus(OrderStatus.UpforPickUp);
        areaNetwork.getDeliveryManDirectory().getDeliveryMan().get(deliveryManjComboBox.getSelectedIndex()).getOrders().add(order);
        populateData();
    }//GEN-LAST:event_assignjButtonActionPerformed

    private void currentOrdersjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentOrdersjTableMouseClicked
        // TODO add your handling code here:
        int selectedIndex = currentOrdersjTable.getSelectedRow();
        if(selectedIndex<0) {
            return;
        }
        DefaultTableModel currentOrdersModel = (DefaultTableModel) currentOrdersjTable.getModel();
        Order order = (Order) currentOrdersModel.getValueAt(selectedIndex, 4);
        
//        DefaultTableModel currentOrderItemModel = (DefaultTableModel) currentMenuItemjTable.getModel();
//        currentOrderItemModel.setRowCount(0);
//        int count=0;
//        System.out.println(order.getItems().size());
//        for(Item item:order.getItems()){
//            count++;
//            Object[] row = new Object[2];
//            row[0]= count;
//            row[1]= item.getProductName();
//            
//            currentOrderItemModel.addRow(row);
//        }
    }//GEN-LAST:event_currentOrdersjTableMouseClicked

    private void ordersDeliveredjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersDeliveredjTableMouseClicked
        // TODO add your handling code here:
        int selectedIndex = ordersDeliveredjTable.getSelectedRow();
        if(selectedIndex<0) {
            return;
        }
        DefaultTableModel ordersDeliveredModel = (DefaultTableModel) ordersDeliveredjTable.getModel();
        Order order = (Order) ordersDeliveredModel.getValueAt(selectedIndex, 4);
        
//        DefaultTableModel deliveredMenuItemModel = (DefaultTableModel) deliveredMenuItemjTable.getModel();
//        deliveredMenuItemModel.setRowCount(0);
//        int count=0;
//        System.out.println(order.getItems().size());
//        for(Item menuItem:order.getItems()){
//            count++;
//            Object[] row = new Object[2];
//            row[0]= count;
//            row[1]= menuItem.getProductName();
//            
//            deliveredMenuItemModel.addRow(row);
//        }
    }//GEN-LAST:event_ordersDeliveredjTableMouseClicked

    private void declinejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declinejButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = currentOrdersjTable.getSelectedRow();
        if(selectedIndex<0) {
            JOptionPane.showMessageDialog(this, "Please select an Order to Decline");
            return;
        }
        DefaultTableModel currentOrdersModel = (DefaultTableModel) currentOrdersjTable.getModel();
        Order order = (Order) currentOrdersModel.getValueAt(selectedIndex, 4);
        if(order.getAssignedTo()!=null) {
            JOptionPane.showMessageDialog(this,"Already accepted order and Delivery person is Assigned");
            return;
        }
        order.setOrderStatus(OrderStatus.Decline);
//        DefaultTableModel currentOrderItemModel = (DefaultTableModel) currentMenuItemjTable.getModel();
//        currentOrderItemModel.setRowCount(0);
        
        populateData();
        
    }//GEN-LAST:event_declinejButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignjButton;
    private javax.swing.JButton backButtonjButton;
    private javax.swing.JLabel currentOrdersHeaderjLabel;
    private javax.swing.JLabel currentOrdersHeaderjLabel1;
    private javax.swing.JTable currentOrdersjTable;
    private javax.swing.JButton declinejButton;
    private javax.swing.JComboBox<String> deliveryManjComboBox;
    private javax.swing.JLabel deliveryPersonjLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable ordersDeliveredjTable;
    private javax.swing.JLabel pendingCountHeaderjLabel;
    private javax.swing.JLabel pendingCountjLabel;
    private javax.swing.JLabel totalCountHeaderjLabel;
    private javax.swing.JLabel totalCountjLabel;
    // End of variables declaration//GEN-END:variables
}
